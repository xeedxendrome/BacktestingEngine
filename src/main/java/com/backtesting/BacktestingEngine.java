package com.backtesting;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

/**
 * BacktestingEngine class serves as the entry point for the backtesting system.
 * It fetches stock data, applies a trading strategy, calculates performance metrics,
 * and performs regression analysis to assess the effectiveness of the strategy.
 */
public class BacktestingEngine {

    public static void main(String[] args) {
        // Initialize the data fetcher responsible for retrieving stock data
        TiingoDataFetcher fetcher = new TiingoDataFetcher();

        // Fetch historical stock data for all specified symbols
        Map<String, List<StockData>> stockDataMap = fetcher.fetchAllStockData();

        // Validate if stock data was successfully fetched; exit if no data is available
        if (stockDataMap == null || stockDataMap.isEmpty()) {
            System.err.println("No stock data available. Exiting.");
            return;
        }

        // Initialize the trading strategy to be applied on the stock data
        TradingStrategy strategy = new TradingStrategy();

        // Fetch market returns for regression analysis and comparison
        Map<String, BigDecimal> marketReturns = fetcher.calculateMarketReturns();

        // Apply the Equal Weighted Average Strategy (EWAStrategy) and generate a portfolio
        Portfolio portfolio = strategy.EWAStrategy(stockDataMap);

        // Add market returns to the portfolio for regression analysis
        if (marketReturns != null && !marketReturns.isEmpty()) {
            // Integrate market returns data into the portfolio
            portfolio.addMarketReturns(marketReturns);

            // Align strategy returns with market returns to prepare for regression analysis
            portfolio.alignReturnsForRegression();

            // Perform regression analysis to evaluate the relationship between
            // portfolio returns and market returns
            portfolio.performRegressionAnalysis();
        } else {
            System.err.println("Market returns data is unavailable for regression analysis.");
        }

        // Calculate performance metrics such as portfolio returns, volatility, etc.
        portfolio.calculatePerformanceMetrics();

        // Assess the accuracy of trading signals generated by the strategy
        portfolio.calculateSignalAccuracy();

        // Analyze time periods where the strategy performed well or underperformed
        portfolio.analyzePeriods();
    }
}
